{"ast":null,"code":"var _ChatService;\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nclass ChatService {\n  static generateSessionId() {\n    return Date.now().toString() + Math.random().toString(36).substr(2, 9);\n  }\n  static async sendMessage(message) {\n    try {\n      const chatMessage = {\n        message,\n        type: 'text',\n        sessionId: this.sessionId,\n        userId: 'demo_user' // In real app, this would come from authentication\n      };\n      const response = await axios.post(`${API_BASE_URL}/chatbot/chat`, chatMessage, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 10000 // 10 second timeout\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw new Error('Failed to send message to chatbot');\n    }\n  }\n  static async sendVoiceMessage(audioData) {\n    try {\n      const formData = new FormData();\n      formData.append('audio', audioData);\n      const response = await axios.post(`${API_BASE_URL}/chatbot/voice`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 15000 // 15 second timeout for voice processing\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error sending voice message:', error);\n      throw new Error('Failed to process voice message');\n    }\n  }\n  static async getSupportedIntents() {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/chatbot/intents`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching supported intents:', error);\n      return [];\n    }\n  }\n  static async searchKnowledgeBase(query) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/chatbot/knowledge-base`, {\n        params: {\n          query\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching knowledge base:', error);\n      return [];\n    }\n  }\n}\n_ChatService = ChatService;\nChatService.sessionId = _ChatService.generateSessionId();\nexport default ChatService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","ChatService","generateSessionId","Date","now","toString","Math","random","substr","sendMessage","message","chatMessage","type","sessionId","userId","response","post","headers","timeout","data","error","console","Error","sendVoiceMessage","audioData","formData","FormData","append","getSupportedIntents","get","searchKnowledgeBase","query","params","_ChatService"],"sources":["C:/Users/Lenovo/Downloads/New folder (3)/frontend/src/services/ChatService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nexport interface ChatMessage {\r\n  message: string;\r\n  type?: string;\r\n  sessionId?: string;\r\n  userId?: string;\r\n}\r\n\r\nexport interface ChatResponse {\r\n  message: string;\r\n  intent: string;\r\n  confidence: number;\r\n  timestamp: string;\r\n  suggestions: string[];\r\n  audioResponse?: string;\r\n  requiresAction?: boolean;\r\n  actionType?: string;\r\n  actionData?: any;\r\n}\r\n\r\nclass ChatService {\r\n  private static sessionId: string = this.generateSessionId();\r\n  \r\n  private static generateSessionId(): string {\r\n    return Date.now().toString() + Math.random().toString(36).substr(2, 9);\r\n  }\r\n  \r\n  static async sendMessage(message: string): Promise<ChatResponse> {\r\n    try {\r\n      const chatMessage: ChatMessage = {\r\n        message,\r\n        type: 'text',\r\n        sessionId: this.sessionId,\r\n        userId: 'demo_user' // In real app, this would come from authentication\r\n      };\r\n      \r\n      const response = await axios.post(`${API_BASE_URL}/chatbot/chat`, chatMessage, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        timeout: 10000 // 10 second timeout\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      throw new Error('Failed to send message to chatbot');\r\n    }\r\n  }\r\n  \r\n  static async sendVoiceMessage(audioData: string): Promise<ChatResponse> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('audio', audioData);\r\n      \r\n      const response = await axios.post(`${API_BASE_URL}/chatbot/voice`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        timeout: 15000 // 15 second timeout for voice processing\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error sending voice message:', error);\r\n      throw new Error('Failed to process voice message');\r\n    }\r\n  }\r\n  \r\n  static async getSupportedIntents(): Promise<any[]> {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/chatbot/intents`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching supported intents:', error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  static async searchKnowledgeBase(query: string): Promise<any[]> {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/chatbot/knowledge-base`, {\r\n        params: { query }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error searching knowledge base:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport default ChatService;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAqBjF,MAAMC,WAAW,CAAC;EAGhB,OAAeC,iBAAiBA,CAAA,EAAW;IACzC,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACF,QAAQ,CAAC,EAAE,CAAC,CAACG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACxE;EAEA,aAAaC,WAAWA,CAACC,OAAe,EAAyB;IAC/D,IAAI;MACF,MAAMC,WAAwB,GAAG;QAC/BD,OAAO;QACPE,IAAI,EAAE,MAAM;QACZC,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBC,MAAM,EAAE,WAAW,CAAC;MACtB,CAAC;MAED,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,GAAGnB,YAAY,eAAe,EAAEc,WAAW,EAAE;QAC7EM,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,OAAO,EAAE,KAAK,CAAC;MACjB,CAAC,CAAC;MAEF,OAAOH,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;IACtD;EACF;EAEA,aAAaC,gBAAgBA,CAACC,SAAiB,EAAyB;IACtE,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,SAAS,CAAC;MAEnC,MAAMT,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,GAAGnB,YAAY,gBAAgB,EAAE4B,QAAQ,EAAE;QAC3ER,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,OAAO,EAAE,KAAK,CAAC;MACjB,CAAC,CAAC;MAEF,OAAOH,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;IACpD;EACF;EAEA,aAAaM,mBAAmBA,CAAA,EAAmB;IACjD,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMnB,KAAK,CAACiC,GAAG,CAAC,GAAGhC,YAAY,kBAAkB,CAAC;MACnE,OAAOkB,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO,EAAE;IACX;EACF;EAEA,aAAaU,mBAAmBA,CAACC,KAAa,EAAkB;IAC9D,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMnB,KAAK,CAACiC,GAAG,CAAC,GAAGhC,YAAY,yBAAyB,EAAE;QACzEmC,MAAM,EAAE;UAAED;QAAM;MAClB,CAAC,CAAC;MACF,OAAOhB,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,EAAE;IACX;EACF;AACF;AAACa,YAAA,GAtEKhC,WAAW;AAAXA,WAAW,CACAY,SAAS,GAAWoB,YAAA,CAAK/B,iBAAiB,CAAC,CAAC;AAuE7D,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}